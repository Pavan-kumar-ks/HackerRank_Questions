The problem statement is given as :
You are given  triangles, specifically, their sides a,b and c.
Print them in the same style but sorted by their areas from the smallest one to the largest one. 
It is guaranteed that all the areas are different.
The best way to calculate a area of a triangle with sides a,b and c is Heron's formula.

As Heron's formula uses p for calculating (a+b+c)/2 and s for area . I have used the same logic .
They have also said that first the area should be calculated and then it should be sorted .
The output should be the sorted array of triangle sides. 
So I have applied swaping logic first to area then to sides of triangle.
I have stored area in an array which is helpful for sorting .
I have also created a local variable in the function same as the structure name as temp1.
Code is given below :

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct triangle
{
	int a;
	int b;
	int c;
};

typedef struct triangle triangle;
void sort_by_area(triangle* tr, int n) 
{
    int i,j;
    double area[n],temp,p;
    triangle temp1;
    for(i =0;i<n;i++)
    {
        p = (tr[i].a+tr[i].b+tr[i].c)/2.0;
        area[i] = sqrt(p*(p - tr[i].a)*(p - tr[i].b)*(p-tr[i].c));
        
    }
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(area[i]>area[j])
            {
                temp = area[j];
                area[j] =area[i];
                area[i] =temp;
                
                temp1 = tr[j];
                tr[j] = tr[i];
                tr[i] = temp1;
            }
        }
        
    }
	
}

int main()
{
	int n;
	scanf("%d", &n);
	triangle *tr = malloc(n * sizeof(triangle));
	for (int i = 0; i < n; i++) {
		scanf("%d%d%d", &tr[i].a, &tr[i].b, &tr[i].c);
	}
	sort_by_area(tr, n);
	for (int i = 0; i < n; i++) {
		printf("%d %d %d\n", tr[i].a, tr[i].b, tr[i].c);
	}
	return 0;
}

Hope this helps :)
